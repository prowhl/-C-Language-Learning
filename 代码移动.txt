//编写代码，演示多个字符从两端移动，向中间汇聚。
#include <stdio.h>
#include <string.h>
#include <windows.h>
#include <stdlib.h>

int main()
{	
	char arr1[] = "welcome to bit!!!!!!";
	char arr2[] = "##############";
	int left = 0;
	int right = strlen(arr)-1;

	while(left <= right)
	{
	
		arr2[left] = arr1[left];
		arr2[right] = arr1[right];
		printf("%s\n",arr2)

		Sellp(1000);      //延时一秒
		system("cls");   //执行系统命令的一个函数 -cls-清空屏幕
		left ++;
		right --;
	}
	printf("%s\n,arr2");
	return 0;		
}

/*头文件：#include <string.h>

strlen()函数用来计算字符串的长度，其原型为：
    unsigned int strlen (char *s);

【参数说明】s为指定的字符串。
strlen()用来计算指定的字符串s 的长度，不包括结束字符"\0"。
【返回值】返回字符串s 的字符数。

注意一下字符数组，例如
    char str[100] = "http://see.xidian.edu.cn/cpp/u/biaozhunku/";
定义了一个大小为100的字符数组，但是仅有开始的11个字符被初始化了，剩下的都是0，所以 sizeof(str) 等于100，strlen(str) 等于11。

如果字符的个数等于字符数组的大小，那么strlen()的返回值就无法确定了，例如
    char str[6] = "abcxyz";
strlen(str)的返回值将是不确定的。因为str的结尾不是0，strlen()会继续向后检索，直到遇到'\0'，而这些区域的内容是不确定的。

注意：strlen() 函数计算的是字符串的实际长度，遇到第一个'\0'结束。如果你只定义没有给它赋初值，这个结果是不定的，它会从首地址一直找下去，直到遇到'\0'停止。而sizeof返回的是变量声明后所占的内存数，不是实际长度，此外sizeof不是函数，仅仅是一个操作符，strlen()是函数。

【函数示例】取得字符串 的长度。
#include<stdio.h>
#include<string.h>
int main()
{
    char *str1 = "http://see.xidian.edu.cn/cpp/u/shipin/";
    char str2[100] = "http://see.xidian.edu.cn/cpp/u/shipin_liming/";
    char str3[5] = "12345";
    printf("strlen(str1)=%d, sizeof(str1)=%d\n", strlen(str1), sizeof(str1));
    printf("strlen(str2)=%d, sizeof(str2)=%d\n", strlen(str2), sizeof(str2));
    printf("strlen(str3)=%d, sizeof(str3)=%d\n", strlen(str3), sizeof(str3));
    return 0;
}
运行结果：
strlen(str1)=38, sizeof(str1)=4
strlen(str1)=45, sizeof(str1)=100
strlen(str1)=53, sizeof(str1)=5

上面的运行结果，strlen(str1)=53显然不对，53是没有意义的。
*/